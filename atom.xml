<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ramsey&#39;s Blog</title>
  <subtitle>iOS 攻城狮</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-09T06:58:31.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ramsey</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS中的Runtime-Swift(使用篇)</title>
    <link href="http://yoursite.com/2017/01/05/iOS%E4%B8%AD%E7%9A%84Runtime-Swift/"/>
    <id>http://yoursite.com/2017/01/05/iOS中的Runtime-Swift/</id>
    <published>2017-01-05T06:01:26.000Z</published>
    <updated>2017-01-09T06:58:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 Obejective-C 开发 iOS 程序的同学一定对 Runtime 运行时机制不陌生，由于 Obejective-C 是一门动态语言，它会将一些工作从编译时推迟到运行时。实际上，由于 Objective-C 的消息分发机制，所有使用 Objective-C 编写的函数或方法，本质上都是通过 Objective-C Runtime 的 <code>objc_msgSend</code> 函数发送的一个消息传递。于是，我们可以通过 Objective-C Runtime 机制的特点，来动态的改变函数的实现，实现 Method Swizzling，亦或是通过 category 来给类扩展存储属性。</p>
<a id="more"></a>
<p>但是，在 Swift 语言中，由于 Swift 已经没有了 Objective-C 的运行时消息机制了，在代码编译的时候，已经确定了实际调用的方法，所以纯粹的 Swift 类和对象是不能实现 Runtime 的，也就没有 Method Swizzling 了。</p>
<p>所幸，凡是皆有转机。为了兼容 Objective-C，凡是继承了 <code>NSObject</code> 的类，都会保留其动态性，依然会遵循 Obejective-C 的消息机制，这就给我们实现 Runtime 提供了可能性。</p>
<p>这篇文章将主要总结下在 Swift 中，Runtime 的几种常见使用。</p>
<blockquote>
<p><strong>请注意：仅仅在不得已的情况下才使用 runtime，随意修改基础框架或所使用的三方代码是毁掉你的应用的绝佳方法。请务必要小心哦</strong></p>
</blockquote>
<h2 id="Runtime-在-Swift-中的使用"><a href="#Runtime-在-Swift-中的使用" class="headerlink" title="Runtime 在 Swift 中的使用"></a>Runtime 在 Swift 中的使用</h2><h3 id="关联对象"><a href="#关联对象" class="headerlink" title="关联对象"></a>关联对象</h3><p>我们知道，在 Swift 的 extension 中，不能直接扩展存储属性，只能扩展计算型属性，而计算型属性的 setter 只能间接的设置其他属性或变量的值，不能直接设置自身的值，否则会引起死循环，无法通过编译。那么想要给类，结构体扩展存储属性就只能利用 Runtime 机制了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">43</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            <span class="keyword">self</span>.age = newValue</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> jobs = <span class="type">Person</span>()</div><div class="line">jobs.age = <span class="number">44</span></div><div class="line"><span class="comment">// error: Playground execution aborted: error: Execution was interrupted, reason: EXC_BAD_ACCESS (code=2, address=0x7fff5f3ffff8).</span></div><div class="line"><span class="comment">// The process has been left at the point where it was interrupted, use "thread return -x" to return to the state before expression evaluation.</span></div></pre></td></tr></table></figure>
<p>想要实现给类，结构体扩展存储属性，需要下面几个方法：</p>
<ul>
<li><p><code>objc_setAssociatedObject(_ object: Any!, _ key: UnsafeRawPointer!, _ value: Any!, _ policy: objc_AssociationPolicy)</code></p>
</li>
<li><p><code>objc_getAssociatedObject(_ object: Any!, _ key: UnsafeRawPointer!) -&gt; Any!</code></p>
</li>
<li><p><code>objc_removeAssociatedObjects(_ object: Any!)</code></p>
</li>
</ul>
<p>这三个方法很类似，一个用于 set，一个用于 get，一个用于 remove。</p>
<ul>
<li><p><code>objc_setAssociatedObject(_ object: Any!, _ key: UnsafeRawPointer!, _ value: Any!, _ policy: objc_AssociationPolicy)</code> 方法讲使用给定的 key 和关联策略来给一个对象设置一个关联</p>
</li>
<li><p><code>objc_getAssociatedObject(_ object: Any!, _ key: UnsafeRawPointer!) -&gt; Any!</code> 方法将返回一个对象的关联值，这个关联值之前通过相同的 key 值设置过关联。</p>
</li>
<li><p><code>objc_removeAssociatedObjects(_ object: Any!)</code> 方法会移除一个对象所有的关联，参数 <code>object</code> 是需要移除关联的那个对象。</p>
</li>
</ul>
<p>那么看下具体的例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不推荐</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="string">"age"</span>) <span class="keyword">as</span>! <span class="type">Int</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            objc_setAssociatedObject(<span class="keyword">self</span>, <span class="string">"age"</span>, newValue, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> jobs = <span class="type">Person</span>()</div><div class="line">jobs.age = <span class="number">44</span></div><div class="line"><span class="built_in">print</span>(jobs.age)</div><div class="line"><span class="comment">// fatal error: unexpectedly found nil while unwrapping an Optional value</span></div></pre></td></tr></table></figure>
<p>上面这种写法是最直接的写法。但是这种写法有一个问题，就是会崩溃。</p>
<p>具体的原因<a href="http://www.jianshu.com/p/53abf1703905" target="_blank" rel="external">这篇文章</a>已经给出了答案。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 推荐</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">AssociaKey</span></span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">Age</span>: <span class="type">String</span> = <span class="string">"age"</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociaKey</span>.<span class="type">Age</span>) <span class="keyword">as</span>! <span class="type">Int</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            objc_setAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociaKey</span>.<span class="type">Age</span>, newValue , .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> jobs = <span class="type">Person</span>()</div><div class="line">jobs.age = <span class="number">44</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"jobs'age is <span class="subst">\(jobs.age)</span>"</span>)</div><div class="line"><span class="comment">// jobs'age is 44</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意，在私有嵌套 <code>struct</code> 中使用 <code>static var</code>，这样会生成我们所需的关联对象键，但不会污染整个命名空间。</p>
<p>大家常见的 MJRefresh（OC）上拉下拉等刷新框架，就是通过这种方式，给 <code>tableView</code> 添加一个<code>mj_header</code>、 <code>mj_footer</code></p>
</blockquote>
<h3 id="方法交叉（Method-Swizzling）"><a href="#方法交叉（Method-Swizzling）" class="headerlink" title="方法交叉（Method Swizzling）"></a>方法交叉（Method Swizzling）</h3><p>有时候，为了解决某些第三方框架里的 bug，我们需要修改一个已经存在的类的方法的行为，这时候我们就会利用方法交叉，方法交叉可以让你交换两个方法的实现，相当于是用你写的方法来重载原有方法，并且还能够是原有方法的行为保持不变。</p>
<p>还有另一种场景，系统自带的方法已经不能满足我们的需求，我们需要在保证系统方法原有的基础上，给其扩展一些功能。这时候有两种方法来实现需求：</p>
<ul>
<li><p>自定义一个子类，重写父类的方法，然后实现我们需要的功能。</p>
</li>
<li><p>利用方法交叉，我们自己定义一个方法，在这个方法里实现所需要的功能，并且调用系统原有的方法，然后利用 Runtime 交换系统的方法，这样在调用系统的方法的时候，实际上是调用的我们自己写的方法。</p>
</li>
</ul>
<p>想要在 Swift(3.0) 中实现方法交叉，有下面几个关键点：</p>
<ul>
<li>在 Objective-C 中，我们使用 <code>category</code> 的 <code>+load</code> 方法作为 Method Swizzling 的载体，因为 <code>+load</code> 方法只会被调用一次，这可以确保我们的方法交互只进行一次，然而在 Swift 中，<code>extension</code> 并不是运行时加载的，所以也就没有在运行时会被加载的类似于 <code>+load</code> 的方法。所以我们需要另一个初始化时就会被调用的方法作为载体方法，在 Swift 中，我们使用下面这个方法</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">open <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">initialize</span>() </span>&#123;</div><div class="line">	<span class="comment">// Method Swizzling</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>在 Swift3.0 之前我们使用 <code>dispatch_once_t</code> 来确保方法只会被交换一次，但3.0之后，这个方法已经不可用了，下面三种方式可以替代：</p>
<ol>
<li><p>全局变量(Global variable)</p>
</li>
<li><p>结构体、枚举或者类的静态属性(Static property of <code>struct</code>, <code>enum</code> or <code>class</code>)</p>
</li>
<li><p>扩展 <code>DispatchQueue</code>，实现 <code>Dispatch once</code> 原有的功能</p>
</li>
</ol>
</li>
<li><p>交换系统类和自定义类里的方法，实现方式不同。对系统类，比如 <code>UIViewController</code>，可以直接进行交换，对于自定义类，有两个地方需要注意：</p>
<ol>
<li><p>包含 swizzle 方法的类需要继承自 <code>NSObject</code></p>
</li>
<li><p>如果要 Swizzle 的是 Swift 类型的方法的话，需要将原方法和替换方法都加上 <code>dynamic</code> 标记，以指明它们需要使用动态派发机制。</p>
<p>这主要是因为 Method Swizzling 的实现是基于 <code>Objective-C</code> 的动态派发机制,所以有这两条限制。</p>
</li>
</ol>
</li>
</ul>
<p>实现 Method Swizzling 会涉及到下面这六个方法：</p>
<ul>
<li><p><code>class_getInstanceMethod(_ cls: Swift.AnyClass!, _ name: Selector!) -&gt; Method!)</code></p>
</li>
<li><p><code>class_addMethod(_ cls: Swift.AnyClass!, _ name: Selector!, _ imp: IMP!, _ types: UnsafePointer&lt;Int8&gt;!) -&gt; Bool</code></p>
</li>
<li><p><code>class_replaceMethod(_ cls: Swift.AnyClass!, _ name: Selector!, _ imp: IMP!, _ types: UnsafePointer&lt;Int8&gt;!) -&gt; IMP!</code></p>
</li>
<li><p><code>method_getImplementation(_ m: Method!) -&gt; IMP!</code></p>
</li>
<li><p><code>method_getTypeEncoding(_ m: Method!) -&gt; UnsafePointer&lt;Int8&gt;!</code></p>
</li>
<li><p><code>method_exchangeImplementations(_ m1: Method!, _ m2: Method!)</code></p>
</li>
</ul>
<p>方法不解释了，苹果的命名规范很好，一看就懂，还不懂得花可以去看下文档，解释的很清晰。</p>
<p>那么，需要注意的点说完了，下面我们还是用一个例子还说明在 Swift 中实现方法交叉。</p>
<h4 id="系统类的方法交叉"><a href="#系统类的方法交叉" class="headerlink" title="系统类的方法交叉"></a>系统类的方法交叉</h4><h5 id="1-使用全局变量解决-dispatch-once-t的问题"><a href="#1-使用全局变量解决-dispatch-once-t的问题" class="headerlink" title="1. 使用全局变量解决 dispatch_once_t的问题"></a>1. 使用全局变量解决 <code>dispatch_once_t</code>的问题</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">let</span> swizzling: (<span class="type">UIViewController</span>.<span class="type">Type</span>) -&gt; () = &#123; viewController <span class="keyword">in</span></div><div class="line">    <span class="keyword">let</span> originalSelector = #selector(viewController.viewWillAppear(<span class="number">_</span>:))</div><div class="line">    <span class="keyword">let</span> swizzledSelector = #selector(viewController.newViewWillAppear(animated:))</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> originalMethod = class_getInstanceMethod(viewController, originalSelector)</div><div class="line">    <span class="keyword">let</span> swizzledMethod = class_getInstanceMethod(viewController, swizzledSelector)</div><div class="line">    </div><div class="line">    <span class="comment">//在进行 Swizzling 的时候,需要用 class_addMethod 先进行判断一下原有类中是否有要替换方法的实现</span></div><div class="line">    <span class="keyword">let</span> didAddMethod = class_addMethod(viewController, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod))</div><div class="line">    </div><div class="line">    <span class="comment">// 这里解释下 class_addMethod 方法，这个方法会给类添加一个新的方法（通过给定的方法名字和方法实现），但是在添加之前首先会判断类中是否已经实现了这个方法（其实就是检查selector是否有对应的implementation），如果已经有了实现，则会返回no，如果没有实现，那么会去检查父类，并且在当前类添加一个父类的重载函数，使用参数中的 Sel 和 IMP。</span></div><div class="line">	<span class="comment">// 如果 class_addMethod 返回 no, 说明当前类中已经有 viewWillApear 方法的实现，这时候只需要直接交换两个方法的实现即可，原来的 viewWillAppear 方法名称实现的是自己实现的 sa_ViewWillAppear 方法，sa_ViewWillAppear 实现的是原来的viewWillAppear。</span></div><div class="line">	<span class="comment">// 如果 class_addMethod 返回 yes, 说明当前类中没有要需要替换的方法的实现,所以需要在父类中查找,这时候就用到 method_getImplemetation 去获取 class_getInstanceMethod 里面的方法实现, 实际上 originalSelector 指向的是父类的方法，class_addMethod 方法会添加一个重载父类方法的新方法，新方法名字为 originalSelector，方法实现是 swizzledMethod，然后再进行 class_replaceMethod 将swizzledSelector 这个方法名字的实现替换为原来父类中的方法实现 originalMethod，这样就达到了我们自定义方法中调用父类实现的目的，从而实现 Swizzing</span></div><div class="line">    <span class="keyword">if</span> didAddMethod &#123;</div><div class="line">        class_replaceMethod(viewController, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod))</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        method_exchangeImplementations(originalMethod, swizzledMethod);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    open <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">initialize</span>() </span>&#123;</div><div class="line">        <span class="comment">// make sure this isn't a subclass</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">self</span> === <span class="type">UIViewController</span>.<span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        swizzling(<span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// MARK: - Method Swizzling</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sa_ViewWillAppear</span><span class="params">(animated: Bool)</span></span> &#123;</div><div class="line">		<span class="comment">// 这里方法实现已经进行了替换，sa_ViewWillAppear 实际上实现的是 ViewWillAppear 方法的实现</span></div><div class="line">        <span class="keyword">self</span>.sa_ViewWillAppear(animated: animated)</div><div class="line">        <span class="keyword">let</span> viewControllerName = <span class="type">NSStringFromClass</span>(type(of: <span class="keyword">self</span>))</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Swizzling viewWillAppear: <span class="subst">\(viewControllerName)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Swizzling viewWillAppear: methodSwizzling.ViewController</span></div></pre></td></tr></table></figure>
<h5 id="2-使用结构体、枚举或者类的静态属性-Static-property-of-struct-enum-or-class-解决-dispatch-once-t的问题"><a href="#2-使用结构体、枚举或者类的静态属性-Static-property-of-struct-enum-or-class-解决-dispatch-once-t的问题" class="headerlink" title="2. 使用结构体、枚举或者类的静态属性(Static property of struct, enum or class)解决 dispatch_once_t的问题"></a>2. 使用结构体、枚举或者类的静态属性(Static property of struct, enum or class)解决 <code>dispatch_once_t</code>的问题</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    open <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">initialize</span>() </span>&#123;</div><div class="line">        <span class="comment">// make sure this isn't a subclass</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">self</span> === <span class="type">UIViewController</span>.<span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> <span class="number">_</span>: () = &#123;</div><div class="line">            <span class="keyword">let</span> originalSelector = #selector(<span class="keyword">self</span>.viewWillAppear(<span class="number">_</span>:))</div><div class="line">            <span class="keyword">let</span> swizzledSelector = #selector(<span class="keyword">self</span>.sa_ViewWillAppear(animated:))</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> originalMethod = class_getInstanceMethod(<span class="keyword">self</span>, originalSelector)</div><div class="line">            <span class="keyword">let</span> swizzledMethod = class_getInstanceMethod(<span class="keyword">self</span>, swizzledSelector)</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> didAddMethod = class_addMethod(<span class="keyword">self</span>, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod))</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> didAddMethod &#123;</div><div class="line">                class_replaceMethod(<span class="keyword">self</span>, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod))</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                method_exchangeImplementations(originalMethod, swizzledMethod);</div><div class="line">            &#125;</div><div class="line">        &#125;()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// MARK: - Method Swizzling</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sa_ViewWillAppear</span><span class="params">(animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">self</span>.sa_ViewWillAppear(animated: animated)</div><div class="line">        <span class="keyword">let</span> viewControllerName = <span class="type">NSStringFromClass</span>(type(of: <span class="keyword">self</span>))</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Swizzling viewWillAppear: <span class="subst">\(viewControllerName)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Swizzling viewWillAppear: methodSwizzling.ViewController</span></div></pre></td></tr></table></figure>
<h5 id="3-扩展-DispatchQueue，实现-Dispatch-once-原有的功能"><a href="#3-扩展-DispatchQueue，实现-Dispatch-once-原有的功能" class="headerlink" title="3. 扩展 DispatchQueue，实现 Dispatch once 原有的功能"></a>3. 扩展 <code>DispatchQueue</code>，实现 <code>Dispatch once</code> 原有的功能</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    open <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">initialize</span>() </span>&#123;</div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Static</span> </span>&#123;</div><div class="line">            <span class="keyword">static</span> <span class="keyword">var</span> token = <span class="type">NSUUID</span>().uuidString</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// make sure this isn't a subclass</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">self</span> === <span class="type">UIViewController</span>.<span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        </div><div class="line">        <span class="type">DispatchQueue</span>.once(token: <span class="type">Static</span>.token) &#123; </div><div class="line">            <span class="keyword">let</span> originalSelector = #selector(<span class="keyword">self</span>.viewWillAppear(<span class="number">_</span>:))</div><div class="line">            <span class="keyword">let</span> swizzledSelector = #selector(<span class="keyword">self</span>.sa_ViewWillAppear(animated:))</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> originalMethod = class_getInstanceMethod(<span class="keyword">self</span>, originalSelector)</div><div class="line">            <span class="keyword">let</span> swizzledMethod = class_getInstanceMethod(<span class="keyword">self</span>, swizzledSelector)</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> didAddMethod = class_addMethod(<span class="keyword">self</span>, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod))</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> didAddMethod &#123;</div><div class="line">                class_replaceMethod(<span class="keyword">self</span>, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod))</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                method_exchangeImplementations(originalMethod, swizzledMethod);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// MARK: - Method Swizzling</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sa_ViewWillAppear</span><span class="params">(animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">self</span>.sa_ViewWillAppear(animated: animated)</div><div class="line">        <span class="keyword">let</span> viewControllerName = <span class="type">NSStringFromClass</span>(type(of: <span class="keyword">self</span>))</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Swizzling viewWillAppear: <span class="subst">\(viewControllerName)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DispatchQueue</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> onceTracker = [<span class="type">String</span>]()</div><div class="line">    open <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">once</span>(<span class="title">token</span>: <span class="title">String</span>, <span class="title">block</span>:() -&gt; <span class="title">Void</span>) </span>&#123;</div><div class="line">        objc_sync_enter(<span class="keyword">self</span>)</div><div class="line">        <span class="keyword">defer</span> &#123;</div><div class="line">            objc_sync_exit(<span class="keyword">self</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> onceTracker.<span class="built_in">contains</span>(token) &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        onceTracker.append(token)</div><div class="line">        block()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方法参考<a href="http://stackoverflow.com/questions/37886994/dispatch-once-in-swift-3" target="_blank" rel="external">StackOverFlow</a>。但是略显繁琐，建议可以选取前两种方法任意一种即可。</p>
<p>关于每句话的含义，代码段里已经有了清晰的解释了，请阅读。</p>
<h4 id="自定义类的方法交叉"><a href="#自定义类的方法交叉" class="headerlink" title="自定义类的方法交叉"></a>自定义类的方法交叉</h4><p>有时候我们需要实现自定义类的的方法交叉，这时候大体上与系统类方法交叉一样，但有两点需要注意。上面已经说过了，这里再说一次：</p>
<ol>
<li><p>包含 swizzle 方法的类需要继承自 <code>NSObject</code></p>
</li>
<li><p>如果要 Swizzle 的是 Swift 类型的方法的话，需要将原方法和替换方法都加上 <code>dynamic</code> 标记，以指明它们需要使用动态派发机制。</p>
</li>
</ol>
<p>以上也决定了，你不能对一个你没有声明的方法进行交换。</p>
<p>例子最直观：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="keyword">let</span> ramsey = <span class="type">Programmer</span>()</div><div class="line">        <span class="keyword">let</span> wu = <span class="type">Doctor</span>()</div><div class="line">        ramsey.foo(<span class="literal">true</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"======="</span>)</div><div class="line">        ramsey.proj_foo(<span class="literal">true</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"======="</span>)</div><div class="line">        wu.foo(<span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">"Person"</span></div><div class="line">    <span class="keyword">dynamic</span> <span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(<span class="number">_</span> bar: Bool)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Person.foo"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Programmer</span>: <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(<span class="number">_</span> bar: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.foo(bar)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Programmer.foo"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Doctor</span>: <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(<span class="number">_</span> bar: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.foo(bar)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Doctor.foo"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Programmer</span> </span>&#123;</div><div class="line">    </div><div class="line">    open <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">initialize</span>() </span>&#123;</div><div class="line">        <span class="comment">// Perform this one time only</span></div><div class="line">        <span class="keyword">let</span> <span class="number">_</span>: () = &#123;</div><div class="line">            <span class="keyword">let</span> originalSelector = #selector(<span class="type">Programmer</span>.foo(<span class="number">_</span>:))</div><div class="line">            <span class="keyword">let</span> swizzledSelector = #selector(<span class="type">Programmer</span>.proj_foo(<span class="number">_</span>:))</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> originalMethod = class_getInstanceMethod(<span class="keyword">self</span>, originalSelector)</div><div class="line">            <span class="keyword">let</span> swizzledMethod = class_getInstanceMethod(<span class="keyword">self</span>, swizzledSelector)</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> addMethod = class_addMethod(<span class="keyword">self</span>, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod))</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> addMethod &#123;</div><div class="line">                class_replaceMethod(<span class="keyword">self</span>, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod))</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                method_exchangeImplementations(originalMethod, swizzledMethod)</div><div class="line">            &#125;</div><div class="line">        &#125;()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// MARK: - Method Swizzling</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">proj_foo</span><span class="params">(<span class="number">_</span> bar: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">self</span>.proj_foo(bar)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> className = <span class="type">NSStringFromClass</span>(type(of: <span class="keyword">self</span>))</div><div class="line">        <span class="built_in">print</span>(<span class="string">"class: <span class="subst">\(className)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> ramsey = <span class="type">Programmer</span>()</div><div class="line"><span class="keyword">let</span> wu = <span class="type">Doctor</span>()</div><div class="line">ramsey.foo(<span class="literal">true</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"======="</span>)</div><div class="line">ramsey.proj_foo(<span class="literal">true</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"======="</span>)</div><div class="line">wu.foo(<span class="literal">true</span>)</div><div class="line"><span class="comment">/* </span></div><div class="line">Person.foo</div><div class="line">Programmer.foo</div><div class="line">class: methodSwizzling.Programmer</div><div class="line">=======</div><div class="line">Person.foo</div><div class="line">Programmer.foo</div><div class="line">=======</div><div class="line">Person.foo</div><div class="line">Doctor.foo</div><div class="line">*/</div></pre></td></tr></table></figure>
<h3 id="遍历获取属性-成员变量-方法-协议名"><a href="#遍历获取属性-成员变量-方法-协议名" class="headerlink" title="遍历获取属性/成员变量/方法/协议名"></a>遍历获取属性/成员变量/方法/协议名</h3><p>Objective-C 的 Runtime 这个框架里还有很多方法，可以让你在运行时做很多事情，比如获取属性名、方法名。协议名。</p>
<ul>
<li><p><code>class_copyPropertyList(_ cls: Swift.AnyClass!, _ outCount: UnsafeMutablePointer&lt;UInt32&gt;!) -&gt; UnsafeMutablePointer&lt;objc_property_t?&gt;!</code></p>
</li>
<li><p><code>property_getName(_ property: objc_property_t!) -&gt; UnsafePointer&lt;Int8&gt;!</code></p>
</li>
<li><p><code>class_copyIvarList(_ cls: Swift.AnyClass!, _ outCount: UnsafeMutablePointer&lt;UInt32&gt;!) -&gt; UnsafeMutablePointer&lt;Ivar?&gt;!</code></p>
</li>
<li><p><code>ivar_getName(_ v: Ivar!) -&gt; UnsafePointer&lt;Int8&gt;!</code></p>
</li>
<li><p><code>class_copyMethodList(_ cls: Swift.AnyClass!, _ outCount: UnsafeMutablePointer&lt;UInt32&gt;!) -&gt; UnsafeMutablePointer&lt;Method?&gt;!</code></p>
</li>
<li><p><code>method_getName(_ m: Method!) -&gt; Selector!</code></p>
</li>
<li><p><code>sel_getName(_ sel: Selector!) -&gt; UnsafePointer&lt;Int8&gt;!</code></p>
</li>
<li><p><code>class_copyProtocolList(_ cls: Swift.AnyClass!, _ outCount: UnsafeMutablePointer&lt;UInt32&gt;!) -&gt; AutoreleasingUnsafeMutablePointer&lt;Protocol?&gt;!</code></p>
</li>
<li><p><code>protocol_getName(_ p: Protocol!) -&gt; UnsafePointer&lt;Int8&gt;!</code></p>
</li>
</ul>
<p>看下具体实现：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 记录成员变量/属性的个数</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">count</span> : <span class="type">UInt32</span> = <span class="number">0</span></div><div class="line"><span class="comment">// 获取所有成员变量/属性、个数</span></div><div class="line"><span class="keyword">let</span> ivarList = class_copyIvarList(<span class="type">UIViewController</span>().classForCoder, &amp;<span class="built_in">count</span>)</div><div class="line"><span class="comment">// 遍历成员变量/属性获取成员变量名</span></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>...<span class="built_in">count</span>-<span class="number">1</span> &#123;</div><div class="line">	<span class="comment">// 获取成员变量/属性的C（C语言的字符串）</span></div><div class="line">	<span class="keyword">let</span> propertyNameC = ivar_getName(ivarList?[<span class="type">Int</span>(index)])</div><div class="line">	<span class="comment">// 将C语言字符串转成Swift语言的字符串</span></div><div class="line">	<span class="keyword">let</span> propertyName = <span class="type">String</span>(cString: propertyNameC!)</div><div class="line">	<span class="comment">// 获取成员变量/属性名的C（C语言的字符串）</span></div><div class="line">	<span class="keyword">let</span> propertyTypeC = ivar_getTypeEncoding(ivarList?[<span class="type">Int</span>(index)])</div><div class="line">	<span class="comment">// 将C语言字符串转成Swift语言的字符串</span></div><div class="line">	<span class="keyword">let</span> propertyType = <span class="type">String</span>(cString: propertyTypeC!)</div><div class="line">	<span class="built_in">print</span>(<span class="string">"propertyName: <span class="subst">\(propertyName)</span>, prorpertyType: <span class="subst">\(propertyType)</span>"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 释放下内存，防止野指针</span></div><div class="line">free(ivarList)</div><div class="line"><span class="comment">/* 部分打印结果</span></div><div class="line">propertyName: _overrideTransitioningDelegate, prorpertyType: @"&lt;UIViewControllerTransitioningDelegate&gt;"</div><div class="line">propertyName: _view, prorpertyType: @"UIView"</div><div class="line">propertyName: _tabBarItem, prorpertyType: @"UITabBarItem"</div><div class="line">propertyName: _navigationItem, prorpertyType: @"UINavigationItem"</div><div class="line">propertyName: _toolbarItems, prorpertyType: @"NSArray"</div><div class="line">propertyName: _title, prorpertyType: @"NSString"</div><div class="line">propertyName: _nibName, prorpertyType: @"NSString"</div><div class="line">propertyName: _nibBundle, prorpertyType: @"NSBundle"</div><div class="line">propertyName: _parentViewController, prorpertyType: @"UIViewController"</div><div class="line">propertyName: _childModalViewController, prorpertyType: @"UIViewController"</div><div class="line">propertyName: _parentModalViewController, prorpertyType: @"UIViewController"</div><div class="line">propertyName: _previousRootViewController, prorpertyType: @"UIViewController"</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>这里需要注意的是 <code>Swift</code> 的属性名和成员变量名是一样的，不会生成加有下划线的成员变量名，这点与 <code>Objective-C</code> 区别开。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 记录方法的个数</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">count</span> : <span class="type">UInt32</span> = <span class="number">0</span></div><div class="line"><span class="comment">// 获取所有方法、个数</span></div><div class="line"><span class="keyword">let</span> method = class_copyMethodList(<span class="type">UIViewController</span>.classForCoder(), &amp;<span class="built_in">count</span>)</div><div class="line"><span class="comment">// 遍历方法获取方法名</span></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>...<span class="built_in">count</span>-<span class="number">1</span> &#123;</div><div class="line">    <span class="comment">// 获取方法</span></div><div class="line">    <span class="keyword">let</span> sel = method_getName(method?[<span class="type">Int</span>(index)])</div><div class="line">    <span class="comment">// 获取方法名的C（C语言的字符串）</span></div><div class="line">    <span class="keyword">let</span> methodNameC = sel_getName(sel)</div><div class="line">    <span class="comment">// 将C语言字符串转成Swift语言的字符串</span></div><div class="line">    <span class="keyword">let</span> methodName = <span class="type">String</span>(cString: methodNameC!)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"methodName: <span class="subst">\(methodName)</span>"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 释放下内存，防止野指针</span></div><div class="line">free(method)</div><div class="line"><span class="comment">/* 部分打印</span></div><div class="line">methodName: title</div><div class="line">methodName: setTitle:</div><div class="line">methodName: invalidate</div><div class="line">methodName: setValue:forKey:</div><div class="line">methodName: encodeWithCoder:</div><div class="line">methodName: initWithCoder:</div><div class="line">methodName: init</div><div class="line">methodName: view</div><div class="line">methodName: _description</div><div class="line">*/</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 记录协议的个数</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">count</span> : <span class="type">UInt32</span> = <span class="number">0</span></div><div class="line"><span class="comment">// 获取所有协议、个数</span></div><div class="line"><span class="keyword">let</span> protocols = class_copyProtocolList(<span class="type">UIViewController</span>.classForCoder(), &amp;<span class="built_in">count</span>)</div><div class="line"><span class="comment">// 遍历协议获取协议名</span></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>...<span class="built_in">count</span>-<span class="number">1</span> &#123;</div><div class="line">    <span class="comment">// 获取协议名的C（C语言的字符串）</span></div><div class="line">    <span class="keyword">let</span> protocolNameC = protocol_getName(protocols?[<span class="type">Int</span>(index)])</div><div class="line">    <span class="comment">// 将C语言字符串转成Swift语言的字符串</span></div><div class="line">    <span class="keyword">let</span> protocolName = <span class="type">String</span>(cString: protocolNameC!)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"protocolName: <span class="subst">\(protocolName)</span>"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">protocolName: _UIViewServiceDeputy</div><div class="line">protocolName: NSExtensionRequestHandling</div><div class="line">protocolName: UIViewControllerPresenting</div><div class="line">protocolName: _UITraitEnvironmentInternal</div><div class="line">protocolName: _UIContentContainerInternal</div><div class="line">protocolName: _UIFocusEnvironmentInternal</div><div class="line">protocolName: NSCoding</div><div class="line">protocolName: UIAppearanceContainer</div><div class="line">protocolName: UITraitEnvironment</div><div class="line">protocolName: UIContentContainer</div><div class="line">protocolName: UIFocusEnvironment</div><div class="line">*/</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章主要总结了下 Swift 中 Runtime 是如何使用的，在此做一个记录，方便自己复习。</p>
<p>同事这篇文章并没有过多的解读 Runtime 背后的原理，日后有时间，讲在写一篇原理篇。</p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>原理篇可以先看下下面三篇文章：</p>
<p><a href="http://www.jianshu.com/p/db6dc23834e3#" target="_blank" rel="external">神经病院Objective-C Runtime出院第三天——如何正确使用Runtime</a></p>
<p><a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/" target="_blank" rel="external">Objective-C Runtime</a></p>
<p><a href="http://www.swiftcafe.io/2016/01/16/objc-runtime/" target="_blank" rel="external">Objective-C Runtime 消息机制 - 代码背后发生的事情</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;使用 Obejective-C 开发 iOS 程序的同学一定对 Runtime 运行时机制不陌生，由于 Obejective-C 是一门动态语言，它会将一些工作从编译时推迟到运行时。实际上，由于 Objective-C 的消息分发机制，所有使用 Objective-C 编写的函数或方法，本质上都是通过 Objective-C Runtime 的 &lt;code&gt;objc_msgSend&lt;/code&gt; 函数发送的一个消息传递。于是，我们可以通过 Objective-C Runtime 机制的特点，来动态的改变函数的实现，实现 Method Swizzling，亦或是通过 category 来给类扩展存储属性。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="iOS" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/iOS/Swift/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="Runtime" scheme="http://yoursite.com/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>iOS中的内存管理(ARC)-Swift</title>
    <link href="http://yoursite.com/2017/01/04/ARC-in-Swift/"/>
    <id>http://yoursite.com/2017/01/04/ARC-in-Swift/</id>
    <published>2017-01-04T02:24:42.000Z</published>
    <updated>2017-01-06T00:55:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Swift</code> 使用 <code>ARC(Automatic Reference Counting)</code> 这一机制来跟踪和管理程序的内存使用状况。通常情况我们并不需要去考虑内存的管理，<code>ARC</code> 机制会一直起作用，确保类的实例不再被使用时，可以自动释放其所占的内存。</p>
<blockquote>
<p><code>ARC</code> 只会对引用类型起作用，结构体(Struct)和枚举类型(enum)是值类型，不是引用类型，也不是通过引用的方式存储和传递。</p>
</blockquote>
<p>然而在少数情况下，<code>ARC</code> 需要我们提供更多的代码之间的信息来更好的管理内存，这篇文章则主要关注这些少数情况。</p>
<a id="more"></a>
<h2 id="ARC-的工作机制"><a href="#ARC-的工作机制" class="headerlink" title="ARC 的工作机制"></a>ARC 的工作机制</h2><p>当我们每次创建一个类的新的实例的时候，ARC 会分配一大块内存用来储存实例的信息。内存中会包含实例的类型信息，以及这个实例所有相关属性的值。此外，当实例不再被使用时，ARC 释放实例所占用的内存，并让释放的内存能挪作他用。这确保了不再被使用的实例，不会一直占用内存空间。</p>
<p>如果我们尝试访问一个已经被销毁的类的实例，则会引起程序的崩溃，为了确保使用中的实例不会被销毁，ARC 会跟踪和计算每一个实例正在被多少属性，常量和变量所引用。哪怕实例的引用数为一，ARC都不会销毁这个实例。</p>
<p>为了使之成为可能，无论你将实例赋值给属性，常量或者是变量，属性，常量或者变量，都会对此实例创建强引用。之所以称之为<strong>强引用</strong>，是因为它会将实例牢牢的保持住，只要强引用还在，实例是不允许被销毁的。</p>
<p><strong>然而在某些情况下，一个类永远不会有0个强引用，这种情况是由于循环强引用所导致的，此时则会造成内存泄露，而解决循环强引用的办法是引入<code>weak</code> 或 <code>unowned</code> 关键字</strong>。</p>
<p>会引起循环强引用的情况主要有两种，<strong>类实例之间的循环强引用</strong>和<strong>闭包引起的循环强引用。</strong></p>
<h2 id="类实例之间的循环强引用及解决方法"><a href="#类实例之间的循环强引用及解决方法" class="headerlink" title="类实例之间的循环强引用及解决方法"></a>类实例之间的循环强引用及解决方法</h2><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>首先我们给出三种情况下类实例之间的循环强引用的解决办法。</p>
<ol>
<li><p>两个类的属性的值都允许为 <code>nil</code>，并会潜在的产生循环强引用，使用弱引用 <code>weak</code> 来解决。</p>
</li>
<li><p>两个类的属性的值，一个允许为 <code>nil</code>，另一个不允许为 <code>nil</code>，并会潜在的产生循环强引用，使用无主引用 <code>unowned</code> 来解决。</p>
</li>
<li><p>两个类的属性都不允许为 <code>nil</code>，并会潜在的产生循环强引用，一个类使用无主引用 <code>unowned</code>，另一个使用隐式解析可选属性 (<code>Implicitly Unwrapped Optionals</code>)。</p>
</li>
</ol>
<blockquote>
<p>对于生命周期中会变为 <code>nil</code> 的实例使用弱引用。相反的，对于初始化赋值后再也不会被赋值为 <code>nil</code> 的实例，使用无主引用。</p>
<p><strong>注意：<br>弱引用必须被声明为变量，表明其值能在运行时被修改。弱引用不能被声明为常量。</strong></p>
</blockquote>
<h3 id="弱引用-weak-reference"><a href="#弱引用-weak-reference" class="headerlink" title="弱引用 (weak reference)"></a>弱引用 (weak reference)</h3><p>在下面这个例子中，展示了一个不经意间造成的循环强引用。例子定义了两个类：<code>Person</code> 和 <code>Apartment</code>，用来建模公寓和其中的居民：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;   </div><div class="line">	<span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">	<span class="keyword">init</span>(name: <span class="type">String</span>) &#123; <span class="keyword">self</span>.name = name &#125;</div><div class="line">	<span class="keyword">var</span> apartment: <span class="type">Apartment</span>?</div><div class="line">	<span class="keyword">deinit</span> &#123; <span class="built_in">print</span>(<span class="string">"<span class="subst">\(name)</span> is being deinitialized"</span>) &#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apartment</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> number: <span class="type">Int</span></div><div class="line">    <span class="keyword">init</span>(number: <span class="type">Int</span>) &#123; <span class="keyword">self</span>.number = number &#125;</div><div class="line">    <span class="keyword">var</span> tenant: <span class="type">Person</span>?</div><div class="line">    <span class="keyword">deinit</span> &#123; <span class="built_in">print</span>(<span class="string">"Apartment #<span class="subst">\(number)</span> is being deinitialized"</span>) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每一个<code>Person</code>实例有一个类型为<code>String</code>，名字为<code>name</code>的属性，并有一个可选的初始化为<code>nil</code>的<code>apartment</code>属性。<code>apartment</code>属性是可选的，因为一个人并不总是拥有公寓。</p>
<p>类似的，每个<code>Apartment</code>实例有一个叫<code>number</code>，类型为<code>Int</code>的属性，并有一个可选的初始化为<code>nil</code>的<code>tenant</code>属性。<code>tenant</code>属性是可选的，因为一栋公寓并不总是有居民。</p>
<p>接下来的代码片段定义了两个可选类型的变量<code>john</code>和<code>number73</code>,并分别被设定为下面的<code>Apartment</code>和<code>Person</code>的实例。这两个变量都被初始化为<code>nil</code>，并为可选的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> john: <span class="type">Person</span>?</div><div class="line"><span class="keyword">var</span> number73: <span class="type">Apartment</span>?</div></pre></td></tr></table></figure>
<p>现在你可以创建特定的<code>Person</code>和<code>Apartment</code>实例并将类实例赋值给<code>john</code>和<code>number73</code>变量：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">john = <span class="type">Person</span>(name: <span class="string">"John Appleseed"</span>)</div><div class="line">number73 = <span class="type">Apartment</span>(number: <span class="number">73</span>)</div></pre></td></tr></table></figure>
<p>当两个实例被创建并且赋值后，下图表示了当前的强引用关系。变量<code>john</code>现在有一个指向<code>Person</code>实例的强引用，而变量<code>number73</code>有一个指向<code>Apartment</code>实例的强引用：</p>
<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/referenceCycle01_2x.png" alt=""></p>
<p>现在我们将两个变量进行关联，这样人就能有公寓住了，并且公寓里也有房客了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">john!.apartment = number73</div><div class="line">number73!.tenant = john</div></pre></td></tr></table></figure>
<p>两个变量关联之后，强引用关系如图：</p>
<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/referenceCycle02_2x.png" alt=""></p>
<p>很不幸的是，此时一个循环强引用已经建立了，如果此时我们将两个变量 <code>john</code> 和 <code>number73</code> 至为 <code>nil</code> 时，引用计数并不会变为0，实例不会被 ARC 销毁，没有任何一个析构函数会被调用，循环强引用阻止了 <code>Person</code> 和 <code>Apartment</code> 类实例的销毁，造成内存泄漏。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">john = <span class="literal">nil</span></div><div class="line">number73 = <span class="literal">nil</span></div></pre></td></tr></table></figure>
<p>在将 <code>john</code> 和 <code>number73</code> 赋值为 <code>nil</code> 后，强引用关系如下图：</p>
<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/referenceCycle03_2x.png" alt=""></p>
<p>根据结论部分第一条原则，当两个类的属性都可以为 <code>nil</code> 的时候，我们使用 <code>weak</code> 来解决循环强引用。</p>
<p>同样的，也可以根据 </p>
<blockquote>
<p>在实例的生命周期中，如果某些时候引用没有值，那么弱引用可以阻止循环强引用。如果引用总是有值，则可以使用无主引用。</p>
</blockquote>
<p>这条原则来判断。</p>
<p>在上面 <code>Apartment</code> 的例子中，一个公寓的生命周期中，有时是没有“居民”的，因此适合使用弱引用来解决循环强引用。</p>
<p>下面的例子跟上面 <code>Person</code> 和 <code>Apartment</code> 的例子一致，但是有一个重要的区别。这一次，<code>Apartment</code>的 <code>tenant</code> 属性被声明为弱引用：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123; <span class="keyword">self</span>.name = name &#125;</div><div class="line">    <span class="keyword">var</span> apartment: <span class="type">Apartment</span>?</div><div class="line">    <span class="keyword">deinit</span> &#123; <span class="built_in">print</span>(<span class="string">"<span class="subst">\(name)</span> is being deinitialized"</span>) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apartment</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> number: <span class="type">Int</span></div><div class="line">    <span class="keyword">init</span>(number: <span class="type">Int</span>) &#123; <span class="keyword">self</span>.number = number &#125;</div><div class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> tenant: <span class="type">Person</span>?</div><div class="line">    <span class="keyword">deinit</span> &#123; <span class="built_in">print</span>(<span class="string">"Apartment #<span class="subst">\(number)</span> is being deinitialized"</span>) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后跟之前一样，建立两个变量（john和number73）之间的强引用，并关联两个实例：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> john: <span class="type">Person</span>?</div><div class="line"><span class="keyword">var</span> number73: <span class="type">Apartment</span>?</div><div class="line"></div><div class="line">john = <span class="type">Person</span>(name: <span class="string">"John Appleseed"</span>)</div><div class="line">number73 = <span class="type">Apartment</span>(number: <span class="number">73</span>)</div><div class="line"></div><div class="line">john!.apartment = number73</div><div class="line">number73!.tenant = john</div></pre></td></tr></table></figure>
<p>现在，两个关联在一起的实例的引用关系如下图所示：</p>
<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/weakReference01_2x.png" alt=""></p>
<p><code>Person</code> 实例依然保持对 <code>Apartment</code> 实例的强引用，但是 <code>Apartment</code> 实例只是对 <code>Person</code> 实例的弱引用。这意味着当你断开 <code>john</code> 变量所保持的强引用时，再也没有指向 <code>Person</code> 实例的强引用了：</p>
<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/weakReference02_2x.png" alt=""></p>
<p>由于再也没有指向 <code>Person</code> 实例的强引用，该实例会被销毁：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">john = <span class="literal">nil</span></div><div class="line"><span class="comment">// prints "John Appleseed is being deinitialized"</span></div></pre></td></tr></table></figure>
<p>唯一剩下的指向 <code>Apartment</code> 实例的强引用来自于变量 <code>number73</code>。如果你断开这个强引用，再也没有指向 <code>Apartment</code> 实例的强引用了：</p>
<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/weakReference03_2x.png" alt=""></p>
<p>由于再也没有指向 <code>Apartment</code> 实例的强引用，该实例也会被销毁：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">number73 = <span class="literal">nil</span></div><div class="line"><span class="comment">// prints "Apartment #73 is being deinitialized"</span></div></pre></td></tr></table></figure>
<p>上面的两段代码展示了变量 <code>john</code> 和 <code>number73</code> 在被赋值为 <code>nil</code> 后，<code>Person</code> 实例和 <code>Apartment</code> 实例的析构函数都打印出“销毁”的信息。这证明了引用循环被打破了。</p>
<h3 id="无主引用-unowned-reference"><a href="#无主引用-unowned-reference" class="headerlink" title="无主引用 (unowned reference)"></a>无主引用 (unowned reference)</h3><p>和弱引用类似，无主引用不会牢牢保持住引用的实例。和弱引用不同的是，无主引用是<strong>永远有值的</strong>。因此，无主引用总是被定义为非可选类型（non-optional type）。你可以在声明属性或者变量时，在前面加上关键字 <code>unowned</code> 表示这是一个无主引用。</p>
<p>由于无主引用是非可选类型，你不需要在使用它的时候将它展开。无主引用总是可以被直接访问。不过 ARC <strong>无法在实例被销毁后将无主引用设为 <code>nil</code></strong>，因为非可选类型的变量不允许被赋值为 <code>nil</code>。</p>
<blockquote>
<p> 注意:<br>如果你试图在实例被销毁后，访问该实例的无主引用，会触发运行时错误。使用无主引用，你必须确保引用始终指向一个未销毁的实例。<br>还需要注意的是如果你试图访问实例已经被销毁的无主引用，程序会直接崩溃，而不会发生无法预期的行为。所以你应当避免这样的事情发生。</p>
</blockquote>
<p>下面的例子定义了两个类，<code>Customer</code> 和 <code>CreditCard</code>，模拟了银行客户和客户的信用卡。这两个类中，每一个都将另外一个类的实例作为自身的属性。这种关系会潜在的创造循环强引用。</p>
<p><code>Customer</code> 和 <code>CreditCard</code> 之间的关系与前面弱引用例子中 <code>Apartment</code> 和 <code>Person</code> 的关系截然不同。在这个数据模型中，一个客户可能有或者没有信用卡，但是一张信用卡总是关联着一个客户。为了表示这种关系，<code>Customer</code> 类有一个可选类型的 <code>card</code> 属性，但是 <code>CreditCard</code> 类有一个非可选类型的 <code>customer</code> 属性。</p>
<p>此外，只能通过将一个 <code>number</code> 值和 <code>customer</code> 实例传递给 <code>CreditCard</code> 构造函数的方式来创建 <code>CreditCard</code> 实例。这样可以确保当创建 <code>CreditCard</code> 实例时总是有一个 <code>customer</code> 实例与之关联。</p>
<p>由于信用卡总是关联着一个客户，根据结论中的第二条原则，当两个类的属性的值，一个允许为 <code>nil</code>，另一个不允许为 <code>nil</code> 时，使用无主引用来避免循环强引用， 因此在这里将 <code>customer</code> 属性定义为无主引用，用以避免循环强引用：</p>
<blockquote>
<p>两个实例A和B，如果实例A必须在实例B存在的前提下才能存在，那么实例A必须用 <code>unowned</code> 无主引用指向实例B。也就是说，有强制依赖性的那个实例必须对另一个实例持有无主引用。</p>
</blockquote>
<p>根据上面这句话，我们可以确定在此种情况下，哪一个类的属性被设置为无主引用。</p>
<p>实例 (A) <code>CreditCard</code> 必须在 实例 (B)  <code>Customer</code> 存在的前提下才能存在（信用卡必须被客户持有），那么实例 (A)   <code>CreditCard</code> 必须用 <code>unowned</code> 无主引用指向实例 (B)  <code>Customer</code>。也就是说这里实例 <code>CreditCard</code> 有强依赖性，它必须对另一个实例 <code>Customer</code> 持有无主引用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">var</span> card: <span class="type">CreditCard</span>?</div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">deinit</span> &#123; <span class="built_in">print</span>(<span class="string">"<span class="subst">\(name)</span> is being deinitialized"</span>) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreditCard</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> number: <span class="type">Int</span></div><div class="line">    <span class="keyword">unowned</span> <span class="keyword">let</span> customer: <span class="type">Customer</span></div><div class="line">    <span class="keyword">init</span>(number: <span class="type">Int</span>, customer: <span class="type">Customer</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.number = number</div><div class="line">        <span class="keyword">self</span>.customer = customer</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">deinit</span> &#123; <span class="built_in">print</span>(<span class="string">"Card #<span class="subst">\(number)</span> is being deinitialized"</span>) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面的代码片段定义了一个叫 <code>john</code> 的可选类型 <code>Customer</code> 变量，用来保存某个特定客户的引用。由于是可选类型，所以变量被初始化为 <code>nil</code>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> john: <span class="type">Customer</span>?</div></pre></td></tr></table></figure>
<p>现在我们可以创建 <code>Customer</code> 类的实例，用它初始化 <code>CreditCard</code> 实例，并将新创建的 <code>CreditCard</code> 实例赋值为客户的 <code>card</code> 属性。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">john = <span class="type">Customer</span>(name: <span class="string">"John Appleseed"</span>)</div><div class="line">john!.card = <span class="type">CreditCard</span>(number: <span class="number">1234_5678_9012_3456</span>, customer: john!)</div></pre></td></tr></table></figure>
<p>当我们关联两个实例后，它们的引用关系如下图所示：</p>
<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/unownedReference01_2x.png" alt=""></p>
<p><code>Customer</code> 实例持有对 <code>CreditCard</code> 实例的强引用，而 <code>CreditCard</code> 实例持有对 <code>Customer</code> 实例的无主引用。</p>
<p>由于 <code>customer</code> 的无主引用，当你断开 <code>john</code> 变量持有的强引用时，再也没有指向 <code>Customer</code> 实例的强引用了：</p>
<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/unownedReference02_2x.png" alt=""></p>
<p>由于再也没有指向 <code>Customer</code> 实例的强引用，该实例被销毁了。其后，再也没有指向 <code>CreditCard</code> 实例的强引用，该实例也随之被销毁了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">john = <span class="literal">nil</span></div><div class="line"><span class="comment">// prints "John Appleseed is being deinitialized"</span></div><div class="line"><span class="comment">// prints "Card #1234567890123456 is being deinitialized"</span></div></pre></td></tr></table></figure>
<h3 id="无主引用以及隐式解析可选属性"><a href="#无主引用以及隐式解析可选属性" class="headerlink" title="无主引用以及隐式解析可选属性"></a>无主引用以及隐式解析可选属性</h3><p>除了以上两种情况，还有可能出现第三种情况，两个属性都必须有值，并且初始化完成后不能为 <code>nil</code> 。在这种场景下，需要一个类使用无主属性，另一个类使用隐式解析可选属性。</p>
<p>这使两个属性在初始化完成后能被直接访问（不需要可选展开），同时避免了循环引用。</p>
<p>下面这个例子说明了如何建立这种关系。</p>
<p>下面的例子定义了两个类，<code>Country</code> 和 <code>City</code>，每个类将另外一个类的实例保存为属性。在这个模型中，每个国家必须有首都，而每一个城市必须属于一个国家。为了实现这种关系，<code>Country</code> 类拥有一个 <code>capitalCity</code> 属性，而 <code>City</code> 类有一个 <code>country</code> 属性：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> capitalCity: <span class="type">City</span>!</div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, capitalName: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        <span class="keyword">self</span>.capitalCity = <span class="type">City</span>(name: capitalName, country: <span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">unowned</span> <span class="keyword">let</span> country: <span class="type">Country</span></div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, country: <span class="type">Country</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        <span class="keyword">self</span>.country = country</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了建立两个类的依赖关系，<code>City</code> 的构造函数有一个 <code>Country</code> 实例的参数，并且将实例保存为 <code>country</code> 属性。</p>
<p><code>Country</code>的构造函数调用了 <code>City</code> 的构造函数。然而，只有 <code>Country</code> 的实例完全初始化完后，<code>Country</code> 的构造函数才能把 <code>self</code> 传给 <code>City</code> 的构造函数。</p>
<p>为了满足这种需求，通过在类型结尾处加上感叹号（City!）的方式，将 <code>Country</code> 的 <code>capitalCity</code> 属性声明为隐式解析可选类型的属性。这表示像其他可选类型一样，<code>capitalCity</code> 属性的默认值为 <code>nil</code>，但是不需要展开它的值就能访问它。</p>
<p>由于 <code>capitalCity</code> 默认值为 <code>nil</code>，一旦 <code>Country</code> 的实例在构造函数中给 <code>name</code> 属性赋值后，整个初始化过程就完成了。这代表一旦 <code>name</code> 属性被赋值后，<code>Country</code> 的构造函数就能引用并传递隐式的 <code>self</code>。<code>Country</code> 的构造函数在赋值 <code>capitalCity</code> 时，就能将 <code>self</code> 作为参数传递给 <code>City</code> 的构造函数。</p>
<p>以上的意义在于你可以通过一条语句同时创建 <code>Country</code> 和 <code>City</code> 的实例，而不产生循环强引用，并且 <code>capitalCity</code> 的属性能被直接访问，而不需要通过感叹号来展开它的可选值：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> country = <span class="type">Country</span>(name: <span class="string">"China"</span>, capitalName: <span class="string">"BeiJing"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"<span class="subst">\(country.name)</span>'s capital city is called <span class="subst">\(country.capitalCity.name)</span>"</span>)</div><div class="line"><span class="comment">// prints "China's capital city is called BieJing"</span></div></pre></td></tr></table></figure>
<p>在上面的例子中，使用隐式解析可选值的意义在于满足了两个类构造函数的需求。<code>capitalCity</code> 属性在初始化完成后，能像非可选值一样使用和存取同时还避免了循环强引用。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>为了段落的首位呼应，再次总结下：</p>
<ul>
<li><p><code>Person</code> 和 <code>Apartment</code> 的例子展示了两个属性的值都允许为 <code>nil</code>，并会潜在的产生循环强引用。这种场景最适合用弱引用来解决。</p>
</li>
<li><p><code>Customer</code> 和 <code>CreditCard</code> 的例子展示了一个属性的值允许为 <code>nil</code>，而另一个属性的值不允许为 <code>nil</code>，并会潜在的产生循环强引用。这种场景最适合通过无主引用来解决。</p>
</li>
<li><p><code>Country</code> 和 <code>City</code> 的例子展示了两个属性的值都不允许为 <code>nil</code>，并会潜在的产生循环强引用。这种场景需要一个类使用无主属性，而另外一个类使用隐式解析可选属性。</p>
</li>
</ul>
<h2 id="闭包引起的循环强引用及解决方法"><a href="#闭包引起的循环强引用及解决方法" class="headerlink" title="闭包引起的循环强引用及解决方法"></a>闭包引起的循环强引用及解决方法</h2><h3 id="如何产生？"><a href="#如何产生？" class="headerlink" title="如何产生？"></a>如何产生？</h3><p>除了实例之间的循环强引用，还有一种情况会引起循环强引用，那就是<strong>闭包</strong>。</p>
<p>当你将一个闭包赋值给类实例的某个属性，并且这个闭包体中又使用了实例。这个闭包体中可能访问了实例的某个属性，例如 <code>self.someProperty</code>，或者闭包中调用了实例的某个方法，例如 <code>self.someMethod</code>。这两种情况都导致了闭包 “捕获”  <code>self</code>，从而产生了循环强引用。</p>
<p>循环强引用的产生，是因为闭包和类相似，都是<strong>引用类型</strong>。当你把一个闭包赋值给某个属性时，你也把一个引用赋值给了这个闭包。实质上，这跟之前的问题是一样的－两个强引用让彼此一直有效。但是，和两个类实例不同，这次一个是类实例，另一个是闭包。</p>
<p>Swift 提供了一种优雅的方法来解决这个问题，称之为<strong>闭包占用列表</strong>（closuer capture list）。同样的，在学习如何用闭包占用列表破坏循环强引用之前，先来了解一下循环强引用是如何产生的，这对我们是很有帮助的。</p>
<p>下面的例子为你展示了当一个闭包引用了 <code>self</code> 后是如何产生一个循环强引用的。例子中定义了一个叫 <code>HTMLElement</code> 的类，用一种简单的模型表示 HTML 中的一个单独的元素：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTMLElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> text: <span class="type">String</span>?</div><div class="line"></div><div class="line">    <span class="comment">// asHTML 是一个参数为空，返回一个String类型值的闭包类型</span></div><div class="line">    <span class="comment">// 这里相当于类HTMLElement的一个属性asHTML引用了一个闭包</span></div><div class="line">    <span class="comment">// 但闭包中引用了self，因此闭包捕获了self，这意味着闭包反过来又持有了HTMLElement实例的强引用，这样就造成了循环强引用。</span></div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> asHTML: () -&gt; <span class="type">String</span> = &#123;	</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> text = <span class="keyword">self</span>.text &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"&lt;<span class="subst">\(<span class="keyword">self</span>.name)</span>&gt;<span class="subst">\(text)</span>&lt;/<span class="subst">\(<span class="keyword">self</span>.name)</span>&gt;"</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"&lt;<span class="subst">\(<span class="keyword">self</span>.name)</span> /&gt;"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, text: <span class="type">String</span>? = <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        <span class="keyword">self</span>.text = text</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">deinit</span> &#123;</div><div class="line">        <span class="built_in">print</span><span class="string">"<span class="subst">\(name)</span> is being deinitialized"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先来解释下这个类。</p>
<p><code>HTMLElement</code> 类定义了一个 <code>name</code> 属性来表示这个元素的名称，例如代表段落的”p”，或者代表换行的”br”。<code>HTMLElement</code> 还定义了一个可选属性 <code>text</code>，用来设置和展现 HTML 元素的文本。</p>
<p>除了上面的两个属性，<code>HTMLElement</code> 还定义了一个 <code>lazy</code> 属性 <code>asHTML</code>。这个属性引用了一个闭包，将 <code>name</code> 和 <code>text</code> 组合成 HTML 字符串片段。该属性是 <code>() -&gt; String</code> 类型，或者可以理解为“一个没有参数，返回 <code>String</code> 的函数”。</p>
<p>默认情况下，闭包赋值给了 <code>asHTML</code> 属性，这个闭包返回一个代表 HTML 标签的字符串。如果 <code>text</code> 值存在，该标签就包含可选值 <code>text</code>；如果 <code>text</code> 不存在，该标签就不包含文本。对于段落元素，根据 <code>text</code> 是 <code>&quot;some text&quot;</code> 还是 <code>nil</code> ，闭包会返回 <code>&quot;&lt;p&gt;some text&lt;/p&gt;&quot;</code> 或者 <code>&quot;&lt;p /&gt;&quot;</code>。</p>
<p>可以像实例方法那样去命名、使用 <code>asHTML</code> 属性。然而，由于 <code>asHTML</code> 是闭包而不是实例方法，如果你想改变特定元素的 HTML 处理的话，可以用自定义的闭包来取代默认值。</p>
<blockquote>
<p>注意:<br><code>asHTML</code> 声明为 <code>lazy</code> 属性，因为只有当元素确实需要处理为HTML输出的字符串时，才需要使用 <code>asHTML</code>。也就是说，在默认的闭包中可以使用 <code>self</code>，因为只有当初始化完成以及 <code>self</code> 确实存在后，才能访问 <code>lazy</code> 属性。</p>
</blockquote>
<p><code>HTMLElement</code> 类只提供一个构造函数，通过 <code>name</code> 和 <code>text</code>（如果有的话）参数来初始化一个元素。该类也定义了一个析构函数，当 <code>HTMLElement</code> 实例被销毁时，打印一条消息。</p>
<p>下面的代码展示了如何用 <code>HTMLElement</code> 类创建实例并打印消息。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> paragraph: <span class="type">HTMLElement</span>? = <span class="type">HTMLElement</span>(name: <span class="string">"p"</span>, text: <span class="string">"hello, world"</span>)</div><div class="line"><span class="built_in">print</span>(paragraph!.asHTML())</div><div class="line"><span class="comment">// prints"hello, world"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意:<br>上面的 <code>paragraph</code> 变量定义为可选 <code>HTMLElement</code>，因此我们可以赋值 <code>nil</code> 给它来演示循环强引用。</p>
</blockquote>
<p>不幸的是，上面写的 <code>HTMLElement</code> 类产生了类实例和 <code>asHTML</code> 默认值的闭包之间的循环强引用。循环强引用如下图所示：</p>
<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/closureReferenceCycle01_2x.png" alt=""></p>
<p>实例的 <code>asHTML</code> 属性持有闭包的强引用。但是，闭包在其闭包体内使用了 <code>self</code>（引用了 <code>self.name</code> 和 <code>self.text</code> ），因此闭包捕获了 <code>self</code>，这意味着闭包又反过来持有了 <code>HTMLElement</code> 实例的强引用。这样两个对象就产生了循环强引用。</p>
<blockquote>
<p>注意:<br>虽然闭包多次使用了 <code>self</code>，它只捕获 <code>HTMLElement</code> 实例的一个强引用。<br>如果设置 <code>paragraph</code> 变量为 <code>nil</code>，打破它持有的 <code>HTMLElement</code> 实例的强引用，<code>HTMLElement</code> 实例和它的闭包都不会被销毁，也是因为循环强引用：</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">paragraph = <span class="literal">nil</span></div></pre></td></tr></table></figure>
<p>注意 <code>HTMLElementdeinitializer</code> 中的消息并没有被打印，证明了 <code>HTMLElement</code> 实例并没有被销毁。</p>
<h3 id="通过定义-捕获列表的方法-，可以避免闭包的循环强引用。"><a href="#通过定义-捕获列表的方法-，可以避免闭包的循环强引用。" class="headerlink" title="通过定义 捕获列表的方法 ，可以避免闭包的循环强引用。"></a>通过定义 <strong><em>捕获列表的方法</em></strong> ，可以避免闭包的循环强引用。</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义捕获列表，捕获列表放置在闭包参数列表和返回类型之前：</span></div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> someClosure: (<span class="type">Int</span>, <span class="type">String</span>) -&gt; <span class="type">String</span> = &#123;</div><div class="line">    [<span class="keyword">unowned</span> <span class="keyword">self</span>] (index: <span class="type">Int</span>, stringToProcess: <span class="type">String</span>) -&gt; <span class="type">String</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// closure body goes here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果闭包没有指定参数列表或者返回类型，则可以通过上下文推断，那么可以捕获列表放在闭包开始的地方，跟着是关键字in：</span></div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> someClosure: () -&gt; <span class="type">String</span> = &#123;</div><div class="line">    [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">    <span class="comment">// closure body goes here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样的，可以根据下面两条原则来确认使用 <code>weak</code> 还是 <code>unowned</code> 来修饰：</p>
<ul>
<li><p>当闭包和捕获的实例总是互相引用时并且总是同时销毁时，将闭包内的捕获定义为无主引用。</p>
</li>
<li><p>当捕获引用有时可能会是 <code>nil</code> 时，将闭包内的捕获定义为弱引用。弱引用总是可选类型，并且当引用的实例被销毁后，弱引用的值会自动置为 <code>nil</code>。这使我们可以在闭包内检查它们是否存在。</p>
</li>
</ul>
<blockquote>
<p>注意:<br>如果捕获的引用绝对不会置为 <code>nil</code>，应该用无主引用，而不是弱引用。</p>
</blockquote>
<p>在这个例子中，无主引用是正确的解决循环强引用的方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTMLElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> text: <span class="type">String</span>?</div><div class="line"></div><div class="line">    <span class="comment">// 这里，捕获列表是[unowned self]，表示“用无主引用而不是强引用来捕获self”。</span></div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> asHTML: () -&gt; <span class="type">String</span> = &#123;</div><div class="line">        [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> text = <span class="keyword">self</span>.text &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"&lt;<span class="subst">\(<span class="keyword">self</span>.name)</span>&gt;<span class="subst">\(text)</span>&lt;/<span class="subst">\(<span class="keyword">self</span>.name)</span>&gt;"</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"&lt;<span class="subst">\(<span class="keyword">self</span>.name)</span> /&gt;"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, text: <span class="type">String</span>? = <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        <span class="keyword">self</span>.text = text</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">deinit</span> &#123;</div><div class="line">        <span class="built_in">println</span>(<span class="string">"<span class="subst">\(name)</span> is being deinitialized"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和之前一样，我们可以创建并打印HTMLElement实例：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> paragraph: <span class="type">HTMLElement</span>? = <span class="type">HTMLElement</span>(name: <span class="string">"p"</span>, text: <span class="string">"hello, world"</span>)</div><div class="line"><span class="built_in">println</span>(paragraph!.asHTML())</div><div class="line"><span class="comment">// prints "&lt;p&gt;hello, world&lt;/p&gt;"</span></div></pre></td></tr></table></figure>
<p>使用捕获列表后引用关系如下图所示：</p>
<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/closureReferenceCycle02_2x.png" alt=""></p>
<p>这一次，闭包以无主引用的形式捕获 <code>self</code>，并不会持有 <code>HTMLElement</code> 实例的强引用。如果将 <code>paragraph</code> 赋值为 <code>nil</code>，<code>HTMLElement</code> 实例将会被销毁，并能看到它的析构函数打印出的消息。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">paragraph = <span class="literal">nil</span></div><div class="line"><span class="comment">// prints "p is being deinitialized"</span></div></pre></td></tr></table></figure>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>使用捕获列表来避免闭包的循环强引用。</p>
<ul>
<li><p>当闭包和捕获的实例总是互相引用时并且总是同时销毁时，将闭包内的捕获定义为无主引用。</p>
</li>
<li><p>当捕获引用有时可能会是 <code>nil</code> 时，将闭包内的捕获定义为弱引用。弱引用总是可选类型，并且当引用的实例被销毁后，弱引用的值会自动置为 <code>nil</code>。这使我们可以在闭包内检查它们是否存在。</p>
</li>
</ul>
<blockquote>
<p>注意:<br>如果捕获的引用绝对不会置为 <code>nil</code>，应该用无主引用，而不是弱引用。</p>
</blockquote>
<h2 id="Strong-Weak-Unowned-的区别"><a href="#Strong-Weak-Unowned-的区别" class="headerlink" title="Strong, Weak, Unowned 的区别"></a>Strong, Weak, Unowned 的区别</h2><p><img src="https://koenig-media.raywenderlich.com/uploads/2016/05/Table.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Swift&lt;/code&gt; 使用 &lt;code&gt;ARC(Automatic Reference Counting)&lt;/code&gt; 这一机制来跟踪和管理程序的内存使用状况。通常情况我们并不需要去考虑内存的管理，&lt;code&gt;ARC&lt;/code&gt; 机制会一直起作用，确保类的实例不再被使用时，可以自动释放其所占的内存。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ARC&lt;/code&gt; 只会对引用类型起作用，结构体(Struct)和枚举类型(enum)是值类型，不是引用类型，也不是通过引用的方式存储和传递。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而在少数情况下，&lt;code&gt;ARC&lt;/code&gt; 需要我们提供更多的代码之间的信息来更好的管理内存，这篇文章则主要关注这些少数情况。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="iOS" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/iOS/Swift/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="ARC" scheme="http://yoursite.com/tags/ARC/"/>
    
  </entry>
  
</feed>
